load "MUMPS_seq"
defaulttoMUMPSseq();

// DECLARATIONS, FILE LOADING ..................................................
mesh th=readmesh("@MESH");

fespace Uv(th,P2);
fespace Up(th,P1);
fespace Uvvp(th,[P2,P2,P1]);
// Base Flow
Uvvp [ub1,ub2,pb];
{
  ifstream file("@BASE_FLOW_DATA");	// load base-flow
  file >> ub1[];
};
string filename="@SIMOUT";
{
  ofstream file(filename);
};
//
Uvvp [u,v,p];			        // current flowfield
Uvvp [up,vp,pp];		      // flowfield at previous time-step
Uvvp [upp,vpp,ppp];		    // flowfield at previous previous time-step
Uvvp [rhs1,rhs2,rhs3];    // auxiliary variable
Uvvp [nlpu,nlpv,nlpp];		// non-linear right-hand-side at previous time-step
Uvvp [nlppu,nlppv,nlppp];	//non-linear right-hand-side at previous previous time-step
// Mass-matrix or scalar-product
varf Mass([u1,v1,p1],[u2,v2,p2]) = int2d(th)(u1*u2+v1*v2);
matrix MatMass = Mass(Uvvp, Uvvp, solver=CG);

// AUTOMATED DECLARATIONS
@DECLARATIONS

// Definition of the spy domain
// Up selecti=(x<=-0.25)*(x>=-0.35)*(y<=0.1);
// Definition of the output sensor
// Up selecto=(x<=10.7)*(x>=10.3)*(y<=0.1);



real[int] controllaw(nbre);
controllaw = 0.;
{
  int controlsize;
  ifstream file("@OL_SIG");
  file >> controlsize;
  for (int i=0;i<controlsize;i++)
  {
	file >> controllaw(i);
  };
};

// Initialisation of random series
int seed;
exec("echo $RANDOM > @SEED");
{
  ifstream fseed("@SEED");
  fseed >> seed;
};
randinit(seed);
cout << "random seed initialization, seed = " << seed << endl;




// INITIALISATION ..............................................................
real tps  = 0; // current time
u[]       = 0; // current flowfield
// coefficients for first-order in time integration
real a0   = 1./dt;
real a1   = -1./dt;
real a2   = 0;
real bet0 = 1;
real bet1 = 0;
// Linearized Navier-Stokes operator with time-stepping
real nu = 1./Re;
varf LNS([u1,v1,p1],[u2,v2,p2])
= int2d(th)(
	(a0*u1*u2 + a0*v1*v2)
	+ nu*(dx(u1)*dx(u2)+dy(u1)*dy(u2)
	+ dx(v1)*dx(v2)+dy(v1)*dy(v2))
	+ u2*(u1*dx(ub1)+v1*dy(ub1)+ub1*dx(u1)+ub2*dy(u1))
	+ v2*(u1*dx(ub2)+v1*dy(ub2)+ub1*dx(v1)+ub2*dy(v1))
	- p1*(dx(u2)+dy(v2))
	- p2*(dx(u1)+dy(v1)))
  + on(1,2,u1=0,v1=0);

matrix A=LNS(Uvvp,Uvvp,solver=sparsesolver);

// Non-linear term
varf rhs([u1,v1,p1],[u2,v2,p2])
= int2d(th)(
	-u2*(u*dx(u)+v*dy(u))
	-v2*(u*dx(v)+v*dy(v)))
+ on(1,2,u1=0,v1=0);

// AUTOMATED INITIALISATION
@INITIALISATION

// Definition of disturbance input
Uvvp [gaussnoise1,gaussnoise2,gaussnoise3];
{
	func real gaussspace(real x, real y)
	{
		return exp(-(x-xnoise)*(x-xnoise)/(2*sigmaspace*sigmaspace))*exp(-(y-ynoise)*(y-ynoise)/(2*sigmaspace*sigmaspace));
	};
	[rhs1,rhs2,rhs3]=[0,gaussspace(x,y),0];
	gaussnoise1[]=MatMass*rhs1[];
};

// Definition of control input
Uvvp [gaussctrl1,gaussctrl2,gaussctrl3];
{
	func real gaussspacectrl(real x, real y)
	{
		return exp(-(x-xcontrol)*(x-xcontrol)/(2*sigmaxctrl*sigmaxctrl))*exp(-(y-ycontrol)*(y-ycontrol)/(2*sigmayctrl*sigmayctrl));
	};
	[rhs1,rhs2,rhs3]=[0,gaussspacectrl(x,y),0];
	gaussctrl1[]=MatMass*rhs1[];
};

// White noise function
func real BoxMuller()
{

  real v1,v2,rsq,fac;
  rsq=0.0;

  while (rsq>=1 || rsq==0)
  {
	v1=2.0*randreal1()-1.0;
	v2=2.0*randreal1()-1.0;
	rsq=v1*v1+v2*v2;
  };

  fac=sqrt(-2.0*log(rsq)/rsq);
  return v2*fac;
};


// INTEGRATION LOOP ............................................................
for (int i=0; i<N; i++)
{
	upp[]  = up[];	      // weak-form of flowfields at previous time-steps
	up[]   = MatMass*u[];
  //
	if(NL)
	{
    // if NL is true, compute non-linear terms
		nlppu[]=nlpu[];
		nlpu[]=rhs(0,Uvvp);
	}
	if(i==1)	// switch to second order in time
	{
		a0    = 1.5/dt;
    a1    = -2./dt;
    a2    = 0.5/dt;
    bet0  = 2;
    bet1  = -1;
		A     = LNS(Uvvp,Uvvp,solver=sparsesolver);
	}
	// Build right-hand-side
	rhs1[] = -a1*up[] - a2*upp[];
	if(NL == true)	// if NL, account non-linear terms
  {
		rhs1[] += bet0*nlpu[] + bet1*nlppu[];
  }
  // INPUTS ....................................................................
  @INPUTS
	real coeffnoise=sigmatemp*BoxMuller();
	rhs1[] += coeffnoise*gaussnoise1[]; // account for upstream noise
	real coeffcontrol=controllaw(i);
	rhs1[] += coeffcontrol*gaussctrl1[]; // account for control
  //
	u[]    = A^-1*rhs1[];  // Flowfield update
	tps+   = dt;           // Time update
	rhs1[] = MatMass*u[];
	//real nrj=u[]'*rhs1[];	// compute perturbation energy
  // OUTPUTS ...................................................................
  @OUTPUTS

	{
		ofstream f(filename,append);
		f.precision(16);
		f << tps << "   "     // 1
		<< nrj << "   "     // 2
		<< input << "   "  // 3
		<< output << "   " // 4
		<< coeffnoise << " " // 5
		<< coeffcontrol << " " << endl; // 6
	};

};
